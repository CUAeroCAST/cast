function [sensorScenario] = init_sensor_model(relativeOrbit, sensorParams)
%INIT_SENSOR_MODEL This function creates a parametric sensor model,
%returning the scenario. 


switch (sensorParams.sensorType)
    case 'Lidar'
        
        sensorScenario = trackingScenario('UpdateRate', sensorParams.samplingRate);
        
        ego = platform(sensorScenario,'Trajectory',kinematicTrajectory('Position',[0 0 0],'AngularVelocitySource', 'Property','AngularVelocity',[0 0 -20*pi]));
        
        sensorOpts = {'UpdateRate',sensorParams.samplingRate, ...
                      'MountingLocation',[0,0,0], ...
                      'MountingAngles',[0,0,0], ...
                      'MaxRange',sensorParams.maxRange, ...
                      'RangeAccuracy',sensorParams.rangeAccuracy, ...
                      'AzimuthResolution',sensorParams.beamDivergence, ...
                      'ElevationResolution',sensorParams.beamDivergencee,...
                      'AzimuthLimits',sensorParams.beamLimits,  ...
                      'ElevationLimits',sensorParams.beamLimitss, ...
                      'HasNoise',true, ...
                      'HasINS',true};
        sensor = monostaticLidarSensor(1,sensorOpts{:});
        ego.Sensors = sensor;
        
    case 'radar'
        
        sensorScenario = trackingScenario('UpdateRate',sensorParams.samplingRate);
        
        ego = platform(sensorScenario,'Trajectory',kinematicTrajectory('Position',[0 0 0],'AngularVelocitySource', 'Property','AngularVelocity',[0 0 -20*pi]));

        scanRate = sensorParams.RPM*360/60;
        
        sensorOpts = {'No Scanning', 'DirectionCoordinates',...
                      'Sensor Rectangular', ...
                      'UpdateRate',sensorParams.samplingRate, ...
                      'MountingLocation', [0 0 0], ...
                      'MountingAngles', [0 0 0],...
                      'MaxMechanicalScanRate',scanRate, ...
                      'FieldOfView',sensorParams.FOV, ...
                      'HasRangeAmbiguities',true, ...
                      'MaxUnambiguousRange',sensorParams.maxRange,...
                      'AzimuthResolution',sensorParams.FOV(1),...
                      'ElevationResolution',sensorParams.FOV(2),...
                      'RangeResolution',sensorParams.rangeResolution,...
                      'Bandwidth',sensorParams.bandWidth,...
                      'CenterFrequency',sensorParams.centerFreq,...
                      'Sensitivity',sensorParams.receiverSensitivity,...
                      'HasNoise',true,...
                      'HasINS',true};
        
        sensor = monostaticRadarSensor(1,sensorOpts{:});
        ego.Sensors = sensor;
        
    case 'Infrared'
        
        sensorScenario = trackingScenario('UpdateRate',sensorParams.samplingRate);
        
        ego = platform(sensorScenario,'Trajectory',kinematicTrajectory('Position',[0 0 0]));
        
end
        

fprintf('Sensor initialization is not implemented');
sensorScenario = 0;
end

